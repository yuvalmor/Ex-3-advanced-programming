@{
    ViewBag.Title = "Display";
}
<!DOCTYPE html>
<html>
<head>
    <style>
        .bg1 {
            width: 100%;
            height: 100%;
            background-size: cover;
        }
    </style>
    <meta name="viewport" content="width=device-width" />
    <title>Display</title>
</head>
<body background="~/Utils/map.png" class="bg1">
    <canvas id="myCanvas"></canvas>
    <script>
        // creating a canvas that spreads over the screen.
        var canvas = document.getElementById("myCanvas");
        canvas.width = window.innerWidth-80;
        canvas.height = window.innerHeight-80;
        var ctx = canvas.getContext("2d");

        /*
         * normallization functions - bridge between the robast values of the
         * simulator and the positive view the program holds
         */
        function normalizeLongitude(lon) {
            var newLon = ((parseFloat(lon) + 180) * canvas.width / 360);
            return newLon;
        }
        function normalizeLatitude(lat) {
            var newLat = ((parseFloat(lat) + 90) * canvas.height / 180);
            newLat = canvas.height - newLat;
            return newLat;
        }

        /*
         * This function draws a single position on the screen, by given position
         */
        draw = function (lon,lat) {
            var normLon = normalizeLongitude(lon);
            var normLat = normalizeLatitude(lat);
            ctx.arc(normLon,normLat,5,0,2*Math.PI);
            ctx.strokeStyle = "black";
            ctx.fillStyle = "pink";
            ctx.fill();
            ctx.stroke();
        };

        /*
         * This function invoks a c# function to recieve position from the simulator
         * and then sends the position to draw function.
         */
        InitialPosition = function () {
            var urlLoc = "/Flight/GetPlaneLocation";
            $.get(urlLoc, null, function (xml) {
                var xmlDoc = $.parseXML(xml),
                $xml = $(xmlDoc),
                lon = $xml.find("NewLon").text();
                lat = $xml.find("NewLat").text();
                draw(lon,lat);
            });
        };

        /*
         * This function draws a line between to position points
         */
        drawTreck = function (NewLon, NewLat, LastLon, LastLat) {
            var newNormLon = normalizeLongitude(NewLon);
            var newNormLat = normalizeLatitude(NewLat);
            var lastNormLon = normalizeLongitude(LastLon);
            var lastNormLat = normalizeLatitude(LastLat);

            ctx.moveTo(lastNormLon, lastNormLat);
            ctx.lineTo(newNormLon, newNormLat);
            ctx.strokeStyle = "black";
            ctx.stroke();
        };

        /*
         * This function invokes a c# function that calcultes to last points
         * sampled from the simulator and sends it to draw function.
         */
        DisplayTreck = function () {
            if (numDisplayMade < @ViewBag.countDisplays) {
                clearInterval(interval2);
            }
            var urlTreck = "/Flight/GetPlaneTreck";
            $.get(urlTreck, null, function (xml) {
                var xmlDoc = $.parseXML(xml),
                    $xml = $(xmlDoc),
                    lon = $xml.find("NewLon").text();
                lat = $xml.find("NewLat").text();
                lastLat = $xml.find("LastLat").text();
                lastLon = $xml.find("LastLon").text();
                drawTreck(lon, lat, lastLon, lastLat);
            });
        }

        /*
         * This function is called by intervals and sends info of 2 points
         * from a file to draw function , in the end displays message
         */
        DisplayFromFile = function () {
            if (iter < ((sizeArr-1) / 2)-1) {
                drawTreck(arr[(iter * 2) + 2], arr[(iter * 2) + 3], arr[(iter * 2)], arr[(iter * 2) + 1]);
            } else {
                clearInterval(interval);
                var fileName = "@ViewBag.fileName";
                alert("finished display from file "+fileName+".txt");
            }
            iter = iter + 1;
        }

        /*
         * This function invoks a c# function to get a string of positions
         * from a given file, then sends to draw in intervals.
         */
        getDataFromFile = function () {
            var file = "@ViewBag.fileName";
            var urlTreck = "/Flight/GetPositionsFromFile";
            $.get(urlTreck, { fileName: file }, function (data) {
                arr = data.split(",");
                sizeArr = arr.length;
                draw(arr[0], arr[1]);
                interval = setInterval(DisplayFromFile, IntervalTime);
            });
        }

        // separation of a display from file and samples from the simulator.
        if (@ViewBag.readFromFile == 1) {
            var interval;
            var iter = 0;
            var sizeArr;
            var arr;
            var IntervalTime = 1000*(@ViewBag.time);
            getDataFromFile();
        } else {
            var numDisplayMade = @ViewBag.countDisplays;
            var interval2;
            InitialPosition();
            if (@ViewBag.time > 0) {
                var IntervalTime = 1000*(@ViewBag.time);
                interval2 = setInterval(DisplayTreck, IntervalTime);
            }
        }
    </script>
</body>
</html>